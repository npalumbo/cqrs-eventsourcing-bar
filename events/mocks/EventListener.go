// Code generated by mockery v2.49.0. DO NOT EDIT.

package mocks

import (
	events "golangsevillabar/events"

	mock "github.com/stretchr/testify/mock"
)

// EventListener is an autogenerated mock type for the EventListener type
type EventListener struct {
	mock.Mock
}

// HandleEvent provides a mock function with given fields: e
func (_m *EventListener) HandleEvent(e events.Event) error {
	ret := _m.Called(e)

	if len(ret) == 0 {
		panic("no return value specified for HandleEvent")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(events.Event) error); ok {
		r0 = rf(e)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewEventListener creates a new instance of EventListener. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewEventListener(t interface {
	mock.TestingT
	Cleanup(func())
}) *EventListener {
	mock := &EventListener{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
