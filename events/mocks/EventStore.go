// Code generated by mockery v2.49.0. DO NOT EDIT.

package mocks

import (
	events "golangsevillabar/events"

	ksuid "github.com/segmentio/ksuid"

	mock "github.com/stretchr/testify/mock"
)

// EventStore is an autogenerated mock type for the EventStore type
type EventStore struct {
	mock.Mock
}

// LoadEvents provides a mock function with given fields: aggregateID
func (_m *EventStore) LoadEvents(aggregateID ksuid.KSUID) ([]events.Event, error) {
	ret := _m.Called(aggregateID)

	if len(ret) == 0 {
		panic("no return value specified for LoadEvents")
	}

	var r0 []events.Event
	var r1 error
	if rf, ok := ret.Get(0).(func(ksuid.KSUID) ([]events.Event, error)); ok {
		return rf(aggregateID)
	}
	if rf, ok := ret.Get(0).(func(ksuid.KSUID) []events.Event); ok {
		r0 = rf(aggregateID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]events.Event)
		}
	}

	if rf, ok := ret.Get(1).(func(ksuid.KSUID) error); ok {
		r1 = rf(aggregateID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SaveEvents provides a mock function with given fields: aggregateID, lastKnownEventID, _a2
func (_m *EventStore) SaveEvents(aggregateID ksuid.KSUID, lastKnownEventID int, _a2 []events.Event) error {
	ret := _m.Called(aggregateID, lastKnownEventID, _a2)

	if len(ret) == 0 {
		panic("no return value specified for SaveEvents")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(ksuid.KSUID, int, []events.Event) error); ok {
		r0 = rf(aggregateID, lastKnownEventID, _a2)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewEventStore creates a new instance of EventStore. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewEventStore(t interface {
	mock.TestingT
	Cleanup(func())
}) *EventStore {
	mock := &EventStore{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
