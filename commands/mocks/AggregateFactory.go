// Code generated by mockery v2.49.0. DO NOT EDIT.

package mocks

import (
	commands "golangsevillabar/commands"

	mock "github.com/stretchr/testify/mock"
)

// AggregateFactory is an autogenerated mock type for the AggregateFactory type
type AggregateFactory struct {
	mock.Mock
}

// CreateAggregate provides a mock function with given fields:
func (_m *AggregateFactory) CreateAggregate() commands.Aggregate {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for CreateAggregate")
	}

	var r0 commands.Aggregate
	if rf, ok := ret.Get(0).(func() commands.Aggregate); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(commands.Aggregate)
		}
	}

	return r0
}

// NewAggregateFactory creates a new instance of AggregateFactory. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAggregateFactory(t interface {
	mock.TestingT
	Cleanup(func())
}) *AggregateFactory {
	mock := &AggregateFactory{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
