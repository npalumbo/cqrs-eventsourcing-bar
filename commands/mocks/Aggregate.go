// Code generated by mockery v2.49.0. DO NOT EDIT.

package mocks

import (
	commands "cqrseventsourcingbar/commands"
	events "cqrseventsourcingbar/events"

	mock "github.com/stretchr/testify/mock"
)

// Aggregate is an autogenerated mock type for the Aggregate type
type Aggregate struct {
	mock.Mock
}

// ApplyEvent provides a mock function with given fields: e
func (_m *Aggregate) ApplyEvent(e events.Event) error {
	ret := _m.Called(e)

	if len(ret) == 0 {
		panic("no return value specified for ApplyEvent")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(events.Event) error); ok {
		r0 = rf(e)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// HandleCommand provides a mock function with given fields: c
func (_m *Aggregate) HandleCommand(c commands.Command) ([]events.Event, error) {
	ret := _m.Called(c)

	if len(ret) == 0 {
		panic("no return value specified for HandleCommand")
	}

	var r0 []events.Event
	var r1 error
	if rf, ok := ret.Get(0).(func(commands.Command) ([]events.Event, error)); ok {
		return rf(c)
	}
	if rf, ok := ret.Get(0).(func(commands.Command) []events.Event); ok {
		r0 = rf(c)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]events.Event)
		}
	}

	if rf, ok := ret.Get(1).(func(commands.Command) error); ok {
		r1 = rf(c)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewAggregate creates a new instance of Aggregate. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAggregate(t interface {
	mock.TestingT
	Cleanup(func())
}) *Aggregate {
	mock := &Aggregate{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
