// Code generated by MockGen. DO NOT EDIT.
// Source: ./emitter.go
//
// Generated by this command:
//
//	mockgen -destination=../mocks/events/mock_emitter.go -source=./emitter.go
//

// Package mock_events is a generated GoMock package.
package mock_events

import (
	events "golangsevillabar/events"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockEventEmitter is a mock of EventEmitter interface.
type MockEventEmitter[E events.Event] struct {
	ctrl     *gomock.Controller
	recorder *MockEventEmitterMockRecorder[E]
	isgomock struct{}
}

// MockEventEmitterMockRecorder is the mock recorder for MockEventEmitter.
type MockEventEmitterMockRecorder[E events.Event] struct {
	mock *MockEventEmitter[E]
}

// NewMockEventEmitter creates a new mock instance.
func NewMockEventEmitter[E events.Event](ctrl *gomock.Controller) *MockEventEmitter[E] {
	mock := &MockEventEmitter[E]{ctrl: ctrl}
	mock.recorder = &MockEventEmitterMockRecorder[E]{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEventEmitter[E]) EXPECT() *MockEventEmitterMockRecorder[E] {
	return m.recorder
}

// EmitEvent mocks base method.
func (m *MockEventEmitter[E]) EmitEvent(event E) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "EmitEvent", event)
}

// EmitEvent indicates an expected call of EmitEvent.
func (mr *MockEventEmitterMockRecorder[E]) EmitEvent(event any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EmitEvent", reflect.TypeOf((*MockEventEmitter[E])(nil).EmitEvent), event)
}
