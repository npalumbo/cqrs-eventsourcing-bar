// Code generated by mockery v2.49.0. DO NOT EDIT.

package mocks

import (
	context "context"
	shared "golangsevillabar/shared"

	mock "github.com/stretchr/testify/mock"
)

// MenuItemRepository is an autogenerated mock type for the MenuItemRepository type
type MenuItemRepository struct {
	mock.Mock
}

// ReadAllItems provides a mock function with given fields: ctx
func (_m *MenuItemRepository) ReadAllItems(ctx context.Context) ([]shared.MenuItem, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for ReadAllItems")
	}

	var r0 []shared.MenuItem
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]shared.MenuItem, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []shared.MenuItem); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]shared.MenuItem)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ReadItems provides a mock function with given fields: ctx, menuItems
func (_m *MenuItemRepository) ReadItems(ctx context.Context, menuItems []int) ([]shared.MenuItem, error) {
	ret := _m.Called(ctx, menuItems)

	if len(ret) == 0 {
		panic("no return value specified for ReadItems")
	}

	var r0 []shared.MenuItem
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, []int) ([]shared.MenuItem, error)); ok {
		return rf(ctx, menuItems)
	}
	if rf, ok := ret.Get(0).(func(context.Context, []int) []shared.MenuItem); ok {
		r0 = rf(ctx, menuItems)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]shared.MenuItem)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, []int) error); ok {
		r1 = rf(ctx, menuItems)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewMenuItemRepository creates a new instance of MenuItemRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMenuItemRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MenuItemRepository {
	mock := &MenuItemRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
